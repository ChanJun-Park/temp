---
layout: post
comments: true
title:  "[청년취업아카데미] DB 5일차 DML, DDL"
date:   2020-07-16 22:07:51 +0900
categories: study
---
## DB 작업유형 2가지 : OLTP, OLAP

DB 와 관련한 업무에는 2가지 유형이 있다.

- `OLTP(OnLine Transaction Process)` : 데이터를 저장하고, 수정하고, 삭제하는 것처럼 데이터를 한건 한건씩 처리하는 업무
- `OLAP(OnLine Analysis Process)` : DB에 저장되어 있는 많은 양의 데이터에 대해서 분석하고 의미있는 정보들을 추출하는 업무

OLAP에서도 select, insert, update, delete와 같은 작업이 있을 수 있다. 그러나 많은 양을 한번에 하는 경우가 많다. 많은 양의 데이터를 테이블에 저장하는 작업을 Loading이라고 한다.

## Transaction 트랜잭션

### Transaction 이란

`Transaction` 이란 하나의 단위로 처리되어야하는 업무(단위)를 뜻한다. 예를 들어 A은행에서 B은행으로 송금하는 과정을 살펴보면, A은행 계좌에서 송금하는 금액만큼 잔액을 차감한 다음에 B은행 계좌의 잔액을 송금한 금액만큼 늘리는 과정으로 생각할 수 있다. 이 때 A은행 계좌에서 잔액을 차감한 뒤에 어떤 이유로(네트워크 문제 등등) 문제가 발생하여 B은행 계좌에는 잔액이 증가하지 않은 경우 심각한 문제가 된다. 이 경우에는 A은행 계좌에 다시 잔액을 원래대로 늘려줘야 한다. 송금 과정은 잔액 차감과 증가 모두 완료되거나, 두 과정 모두 실행되지 않아야 한다. 이러한 특성을 `원자성(Atomicity)` 라고 한다.

### Transaction 이 시작되고 종료되는 시점

#### Transaction 이 시작되는 시점

- 앞선 Transaction이 종료된 이 후 실행가능한 SQL 문장이 오는 경우 바로 새로운 Transacion이 시작된다.

#### Transaction 이 종료되는 시점

- COMMIT, ROLLBACK 명령이 실행되는 경우
- DDL, DCL 명령이 실행되는 경우 (암시적 COMMIT이 발생한다.) : DDL, DCL 명령은 해당 명령 하나가 Transaction이 된다.
- 사용자 프로세스(SQL Deveploper, SQL*plus)가 사용자에 의해서 정상적으로 종료되는 경우(자동으로 COMMIT 되거나, 변경된 사항에 대해서 COMMIT 할지 ROLLBACK 할지 결정할 수 있다.)
- 사용자 프로세스(SQL Deveploper, SQL*plus)가 사용자에 의해서 비정상적으로 종료되는 경우(변경사항이 ROLLBACK 된다.)
- 시스템이 비정상적으로 종료하는 경우(변경사항이 ROLLBACK 된다.)

### COMMIT과 ROLLBACK

#### COMMIT

새로운 `Transaction` 이 시작된 이 후 모든 `DML` 명령을 영구적으로 반영한다. `COMMIT` 명령이 실행된 이 후에는 DML 명령으로 변경했던 사항들을 다시 `ROLLBACK` 할 수 없다.

#### ROLLBACK

현재 `Transaction` 이 시작된 이 후의 모든 변경사항을 `Transaction` 시작 이전으로 되돌린다.

```sql
DELETE dept
WHERE 1 = 1;

ROLLBACK; -- 앞의 DELETE 가 취소된다.
```

#### Oracle의 Savepoint

Oracle의 경우 DB 작업을 하던 어느 임의의 시간에 `SAVEPOINT` 라는 것을 지정하여 ROLLBACK의 기준점으로 삼을 수 있다. 해당 Savepoint가 지정된 시간대의 DB 상태로 되돌아간다.

```sql
insert into dept(deptno, dname, loc)
values (2000, 'edu', 'Seoul');

SAVEPOINT INSERT_DONE;

UPDATE DEPT
SET DNAME = 'STUDY'
WHERE DEPTNO = 2000; -- 실수

ROLLBACK TO INSERT_DONE;
```

### 읽기 일관성 이미지

두 개의 `SESSION` 에서 하나의 테이블을 동시에 작업하는 경우, 한 세션에서 테이블 데이터를 조작하는 과정에서 다른 세션이 해당 테이블 데이터를 조작하는 경우 문제가 발생할 수 있다. 이를 방지하기 위해서 한 세션이 `TRANSACTION`을 시작하는 동안 변경했던 내용들은 `TRANSACTION`이 끝나기 전까지는 다른 세션에서 확인할 수 없도록 하였다. 또 한 세션에서 데이터를 변경한 경우 해당 데이터 행에 LOCK이 걸려서 다른 세션에서 수정하고자 한다면 LOCK이 풀릴 때까지 대기하게 된다.

한 세션에서 데이터를 변경하는 과정에서 일어나는 동작들은 다음과 같다.

- 세션이 어떤 데이터를 수정하고자 할 때 먼저 해당 데이터 열에 `LOCK` 을 설정한다.
- 데이터 블록에 저장되어 있던 데이터를 변경하기 전 원래 데이터 값을 `UNDO 세그먼트` 라는 공간에 백업해둔다.
- 데이터를 변경한다.

데이터를 수정하기 전에 설정한 `LOCK` 은 commit이나 rollback 명령이 일어나서 TRANSACTION이 끝나기 전까지는 풀리지 않는다. 따라서 다른 세션에서는 해당 데이터를 수정하고자 했을때, 해당 데이터를 수정한 세션의 TRANSACTION이 종료될 때까지 큐에 대기하게 된다.

`SELECT` 명령의 경우에는 데이터에 `LOCK`이 걸린 여부에 상관없이 실행될 수 있다. 그러나 다른 세션에서 해당 데이터를 `SELECT` 과 같은 명령으로 확인할 때 데이터 블록에 수정되어 있는 내용이 아니라 `UNDO 세그먼트` 에 백업된 내용을 바탕으로 만들어진 `읽기 일관성 이미지` 를 바탕으로 데이터를 확인하게 된다. 즉, 앞선 세션(데이터를 수정하는 세션)이 변경한 데이터가 아니라 변경이 일어나기 전 데이터를 확인한다.

### SELECT FOR UPDATE

많은 양의 데이터를 UPDATE 하는 경우 한 행에 대해서 lock을 걸고, 수정하고, 다시 한 행에 대해서 lock을 걸고 수정하는 방식이다. 이 경우 아직 수정되지 않은 데이터에 대해서 다른 세션에서 먼저 수정하는 경우 전체 UPDATE가 큐에서 대기하게 되는 등의 문제가 발생한다. 여러 행에 대해서 미리 전체적으로 lock을 걸고 작업하고 싶다면 `SELECT FOR UPDATE` 구문을 사용할 수 있다.

```sql
SELECT employee_id, salary, commission_pct, job_id
FROM employees
WHERE job_id = 'SA_REP'
FOR UPDATE
ORDER BY employee_id;
```

## DDL(Data Definition Language)

### Oracle에서 사용하는 데이터 타입

- CHAR : 고정길이 문자열
- VARCHAR2 : 가변길이 문자열
- LONG : 가변길이 문자 데이터 최대 2GB
- CLOB : 문자 타입의 Large Object 4GB 이상의 데이터를 저장할 수 있다.
- NCLOB : 다국어 문자를 지원한다.
- NUMBER : 숫자 타입
- DATE : 연, 월, 일, 시, 분, 초, 분기
- TIMESTAMP : 소수점 이하 9자리 초까지 확인할 수 있는 자료형
- TIMESTAMP WITH LOCAL TIMEZONE
- RAW, LONG RAW : Raw binary data
- BLOB : 바이너리 Large Object
- ROWID : 테이블에 있는 행의 고유한 주소를 나타내는 BASE-64 숫자 체계

#### CHAR VS VARCHAR2

- CHAR(9) : 9자리 고정 길이 문자열을 저장한다. 9자리 이하의 문자가 들어오는 경우 공백을 추가하여 9자리를 맞춰준다.
- VARCHAR2(9) : 9자리 가변 길이 문자열을 저장한다. 9자리 이하의 문자가 들어오는 경우 공백을 추가히지 않고 원문 그대로 저장한다.

`VARCHAR2` 타입의 경우 데이터가 저장될 수 있는 필요 공간만큼만 저장공간을 사용하기 때문에 저장공간을 컴팩트하게 관리할 수 있다. 그러나 이 후 원래 저장되어 있던 문자열보다 길이가 더 긴 문자열로 수정하고자 했을 때, 해당 데이터가 저장된 데이터 블록의 free space가 부족한 경우, 해당 열 전체를 다른 데이터 블록으로 Migration 한다. 원래 데이터가 저장된 공간은 비우지 않고, 새로 데이터가 저장된 공간의 주소를 가리키게 된다.

`CHAR` 타입의 경우 `VARCHAR2`에서 발생하는 row migration으로 인한 성능저하 문제는 발생하지 않는다. 그러나 불필요한 정보를 저장하기 위해서 저장공간을 낭비하는 문제가 있다. 또한 `VARCHAR2` row migration가 자주 발생할 경우 테이블 구조를 수정해서 문제를 해결하는 방법이 있기 때문에 문자 데이터를 저장할 때 주로 `VARCHAR2` 데이터를 이용하는 경우가 많다.

### CREATE TABLE

`CREATE TABLE` 구문을 이용해서 새로운 테이블 객체를 생성할 수 있다.

```sql
CREATE TABLE table_name (column_name column_type [contraints] [, ...]);
```

#### 제약조건 (Constraints)

RDBMS 에서 **데이터 무결성(Integrity)** 를 구현하는 방법 중 하나이다. 데이터의 무결성이란 데이터가 비즈니스 관점에서 볼 때 결점이 없다는 뜻이다. 제약조건(Constraints)에는 다음과 같은 종류가 있다.

- `Primary key` : 테이블에서 하나의 행 데이터를 유일하게(Unique) 식별해주는 속성을 뜻한다. Primary Key 로 설정된 열은 또한 NOT NULL이어야 한다. 또한 Primary Key는 테이블에서 한번만 설정될 수 있다.
- `Unique` : Primary Key와 비슷하게 테이블에서 하나의 행 데이터를 유일하게(Unique) 식별해주는 속성을 뜻한다. 그러나 NULL 데이터를 허용한다는 점과 여러개의 Unique 제약 조건을 설정할 수 있다는 차이점이 있다.
- `NOT NULL` : NULL 데이터를 허용하지 않는다는 속성이다.
- Check : 범위 조건이나 동등 조건처럼 특정한 조건을 명시하고 해당 조건만을 만족하도록 하는 제약조건이다.
- `Foreign Key` : 외래키 제약조건이라고도 한다. 제약 조건에는 2개 테이블의 컬럼이 관여가 되어 있다. 한 테이블의 컬럼이 다른 테이블의 컬럼을 참조하는 관계인데, 참조를 하는 쪽 (Referencial)의 컬럼에 나타나는 데이터 값이 반드시 참조를 받는 쪽 (Referenced)의 컬럼 값 중 하나여야 한다는 뜻이다.

이러한 제약조건은 컬럼 하나 하나에 설정할 수도 있고, 테이블 선언 마지막에 설정할 수도 있는데, 전자를 컬럼 제약조건, 후자를 테이블 제약조건이라고도 한다.

```sql
CREATE TABLE dept3 (DEPTNO NUMBER(9) CONSTRAINT dept3_pk PRIMARY KEY,
                    DNAME VARCHAR2(9) UNIQUE NOT NULL,
                    LOC VARCHAR2(9) NOT NULL);
```

`CONSTRAINT` 키워드를 이용하면 제약조건의 이름을 설정할 수 있다. 이렇게 이름을 설정해두면 후에 해당 제약조건을 만족하지 않는 쿼리가 실행되려고 할때 나타나는 오류 메시지의 정보에 포함되어, 어떤 제약조건이 문제인지를 확인할 수 있다. 또한 `PRIMARY KEY` 에 대한 제약조건 이름을 지정할 경우, 자동으로 생성되는 PRIMARY KEY의 인덱스 이름으로 제약조건 이름이 설정된다.

#### INDEX

수백만건의 데이터가 존재하는 테이블에서 데이터를 검색하는 경우 데이터 블록에 저장된 정보들을 순차적으로 읽어야 해서 오랜 시간이 걸린다. 그러나 데이터를 순차적이 아닌 트리와 같은 계층적으로 저장할 경우 검색 시간을 현저히 줄일 수 있다. `INDEX` 는 이처럼 검색시간 향상을 위해서 데이터 블록에 저장된 데이터에 대한 포인터를 트리 형태로 구성한 자료구조를 의미한다. 인덱스의 트리 자료구조는 `B*-tree`의 형태로 구성되어 있다. 각 트리의 노드에는 해당 노드가 의미하는 데이터가 실제로 데이터 블록의 어느 위치에 저장되어 있는지를 가리킨다.

테이블 제약 조건 중에서 `PRIMARY KEY`와 `UNIQUE` 속성이 지정된 열에는 자동으로 인덱스가 생성된다. 검색속도의 향상 목적도 있지만, 유일키 특성을 판단할 때의 과정을 빠르게 진행하기 위한 목적도 있다.

### ALTER TABLE

테이블의 구조를 변경하고자 할 때 사용하는 `DDL` 문장이다. 다음과 같은 동작들을 수행할 수 있다.

- 새로운 컬럼 추가 `ADD`
- 컬럼의 데이터 타입 변경 `MODIFY`
- 컬럼의 이름 변경 `MODIFY`
- 컬럼의 제약 조건 변경 `MODIFY`
- 컬럼을 사용하지 못하도록 설정 
- 컬럼을 삭제 `DROP`

#### 새로운 컬럼 추가

```sql
ALTER table_name
ADD (column_name data_type [constraint])
```

#### 컬럼의 데이터 타입 변경

```sql
ALTER TABLE table_name
MODIFY (column_name data_type [constraint])
```

#### 컬럼을 삭제

```sql
ALTER TABLE table_name
DROP (column_name)
```

컬럼을 삭제하는 명령은 내부 데이터를 삭제하는 과정을 동반하기 때문에 상당한 시간이 걸리고, 일관성을 저해하는 작업이다. 따라서 가능한 다른 사람들이 DB를 사용하는 시간대가 아닌 시간대에 작업을 진행해야 한다. 그러나 경우에 따라서 즉시 컬럼의 데이터를 다른 사용자가 사용하지 못하도록 해야하는 때가 있다 이런 경우에 `UNUSED` 컬럼 속성을 지정하여 컬럼 데이터를 데이터 블록에서는 지우지 않지만 즉시 사용 불가능 상태로 만들 수 있다.

```sql
ALTER TABLE table_name
SET UNUSED column_name;
```

이 후에 실제로 drop 명령을 수행할 수 있는 시점에서 다음과 같이 컬럼을 제거할 수 있다.

```sql
ALTER TABLE table_name
DROP UNUSED COLOUMNS;
```

### DROP TABLE

테이블을 삭제하는 기능

```sql
DROP table_name;
```

바로 삭제되는 것은 아니고 일단 휴지통으로 들어간다. 데이터 블록에 있던 데이터들은 해당 블록에 다른 데이터가 쓰이기 전까지는 유지가 된다. 휴지통에서 복구하고 싶다면 `FLASHBACK` 을 이용해서 복구할 수 있다.

```SQL
FLASHBACK TABLE EMP2 TO BEFORE DROP;  
```
